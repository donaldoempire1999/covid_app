# Generated by Django 3.1.4 on 2020-12-22 11:55

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile_phone_working', models.IntegerField(blank=True, null=True, unique=True)),
                ('is_doctor', models.BooleanField(default=False)),
                ('is_scout', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Citizen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='', max_length=30)),
                ('second_name', models.CharField(blank=True, default='', max_length=30)),
                ('birth_day', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'M'), ('F', 'F')], default='M', max_length=1)),
                ('identity_card_id', models.CharField(default=0, max_length=255, unique=True)),
                ('nationality', models.CharField(choices=[('Cmr', 'Cameroonian'), ('Oth', 'Others')], default='Cameroonian', max_length=255)),
                ('mobile_phone', models.CharField(default=0, max_length=20, unique=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='media/citizens_pictures')),
                ('register_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'citizens',
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('symptom_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='', max_length=55)),
                ('text_explain', models.CharField(default='', max_length=2048)),
                ('illustration', models.FileField(null=True, upload_to='media')),
                ('value', models.IntegerField()),
                ('register_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'symptoms',
            },
        ),
        migrations.CreateModel(
            name='OnlineTest',
            fields=[
                ('id_test', models.AutoField(primary_key=True, serialize=False)),
                ('percentage', models.IntegerField()),
                ('comments', models.CharField(default='', max_length=1024)),
                ('result', models.CharField(default='', max_length=1024)),
                ('date_test', models.DateTimeField(auto_now=True)),
                ('state', models.TextField(blank=True, null=True)),
                ('voice', models.FileField(null=True, upload_to='media/voices')),
                ('citizen_who_has_been_tested', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='screening.citizen')),
                ('symptoms_detected', models.ManyToManyField(related_name='online_tests', to='screening.Symptom')),
            ],
            options={
                'db_table': 'online_tests',
            },
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255)),
                ('body', models.TextField(default='')),
                ('image', models.FileField(upload_to='media/news')),
                ('user_has_posted', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HasScreened',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('+', '+'), ('-', '-'), ('?', '?')], max_length=1)),
                ('screening_date', models.DateTimeField(auto_now=True)),
                ('type_screening', models.CharField(choices=[('quick', 'quick'), ('slow', 'slow')], max_length=5)),
                ('region', models.CharField(choices=[('East', 'East'), ('South', 'South'), ('West', 'West'), ('North', 'North'), ('Centre', 'Centre'), ('Adamaoua', 'Adamaoua'), ('Extreme_North', 'Extreme_North'), ('Littoral', 'Littoral'), ('South_West', 'South_West'), ('North_West', 'North_West')], max_length=13)),
                ('department', models.CharField(max_length=25)),
                ('quarter', models.CharField(max_length=25)),
                ('city', models.CharField(max_length=25)),
                ('site_following_him', models.CharField(blank=True, max_length=255, null=True)),
                ('citizen_who_has_been_screened', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citizen_who_has_been_screened', to='screening.citizen')),
                ('scout_who_screened', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scout_info_tracker', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'has_screened',
            },
        ),
        migrations.CreateModel(
            name='HasConsulted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_consulted', models.DateField()),
                ('doctor_observation', models.CharField(default='', max_length=2048)),
                ('citizen_has_been_consulted', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='screening.citizen')),
                ('doctor_who_has_consulted', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'has_consulted',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='citizens_screened',
            field=models.ManyToManyField(through='screening.HasScreened', to='screening.Citizen'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
